<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
 
  /**
 * Implements hook_preprocess_HOOK().
 */
function lrcs_bootstrap_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if(!is_object($node) && is_int((int) $node)) {
    $node = Drupal\node\Entity\Node::load($node);
  }
  if (is_object($node)) {
    $type = $node->getType();
    switch ($type) {
      case "landing_page":
        $variables['template_type'] = "edge-to-edge";
        break;
      case "narrative":
        $variables['template_type'] = "edge-to-edge";
        break;
      default:
      $variables['template_type'] = "not-edge-to-edge";
    }
  }
  elseif ($variables['is_front']) {
    $variables['template_type'] = "edge-to-edge";
  }
  else {
    $variables['template_type'] = "not-edge-to-edge";
  }
}
 
/**
 * Implements hook_preprocess_HOOK().
 */
// function lrcs_bootstrap_preprocess_page_title(&$variables) {
//   $node = \Drupal::routeMatch()->getParameter('node');
//   if(!is_object($node) && is_int((int) $node)) {
//     $node = Drupal\node\Entity\Node::load($node);
//   }
//   if (is_object($node)) {

//     if($node->getType() == 'legacy_photo_essay' || $node->getType() == 'photograph'){
//       $variables['banner'] = true;
//        unset($variables['title']);
//     }

//     $featured_media_present = (!empty($node->field_banner_media_element->entity->field_banner_media->entity->field_image->entity));
//     if ($node->getType() == 'narrative' && $featured_media_present) {
//       $variables['featured_media_present'] = "featured-media";
//       $featured_media_display = $node->get('field_banner_media_element')->entity->get('field_display_options')->getValue()[0]['value'];
//       switch ($featured_media_display) {
//         case "1":
//           $variables['featured_media_display_option'] = "full-width";
//           break;
//         case "2":
//           $variables['featured_media_display_option'] = "not-full-width";
//       }
//     }
//     elseif ($node->getType() == 'narrative' && empty($featured_media_present)) {
//       $variables['featured_media_present'] = "no-featured-media";

//       if ($node->get('field_banner_color')->getValue()) {
//         $banner_color = $node->get('field_banner_color')->getValue()[0]['color'];
//         $variables['banner_color'] = "background-color: ".$banner_color.";";
//         if($banner_color_opacity = $node->get('field_banner_color')->getValue()[0]['opacity']){
//           $banner_color_values = hex2rgb($node->get('field_banner_color')->getValue()[0]['color']);
//           $banner_color_values[] = $banner_color_opacity;
//           $variables['banner_color'] .= "background-color: rgba(".implode(",",$banner_color_values).");";
//         }
//       }
//     }
    
//     if ($node->field_subtitle && $node->get('field_subtitle')->getValue()) {
//       $variables['subtitle'] = $node->get('field_subtitle')->getValue()[0]['value'];
//     }

//     $authorship_present = (!empty($node->field_authorship->entity));
//     if ($node->field_authorship && $authorship_present) {
//       $variables['byline'] = $node->get('field_authorship')->entity->getName();
//     } 
//   }
// }


/**
 * Implements hook_preprocess_paragraph__breakout().
 */
function lrcs_bootstrap_preprocess_paragraph__section(&$variables){
  $paragraph = $variables['paragraph'];
  $variables['paragraph_section']['style'] = "";
  if(!$paragraph->field_background_color->isEmpty()){
    $background_color = $paragraph->field_background_color->getValue()[0]['color'];
    $variables['paragraph_section']['style'] .= "background-color: $background_color;";
  }
  if(!$paragraph->field_text_color->isEmpty()){
    $text_color = $paragraph->field_text_color->getValue()[0]['value'];
    switch ($text_color) {
        case "1":
          $variables['text_color'] = "text-black";
          break;
        case "2":
          $variables['text_color'] = "text-white";
      }
  }

  // Setup vertical padding.
  $verticalpadding = $paragraph->field_vertical_padding->getValue();
  $variables['vertical_padding'] = !empty($verticalpadding[0]['value']);

  if(!$paragraph->field_section_width->isEmpty()){
    $width = $paragraph->field_section_width->getValue()[0]['value'];
    switch ($width) {
        case "1":
          $variables['width'] = "lrcs-content-container-narrow container-fluid";
          break;
        case "2":
          $variables['width'] = "lrcs-content-container container-fluid";
      }
  }


  if(!$paragraph->field_background_image->isEmpty() && $background_image = $paragraph->field_background_image->entity){
    $background_image_url = file_create_url($background_image->getFileUri());
    $variables['paragraph_section']['style'] .= "background-image: url('$background_image_url');";
  }
  if(empty($variables['paragraph_section']['style'])){
    unset($variables['paragraph_section']['style']);
  }
//  dpm($variables['paragraph_section']);
}


/**
 * Implements hook_preprocess_field().
 */
function lrcs_bootstrap_preprocess_field__field_item(&$variables){
  //dpm($variables);
}
/**
 * Implements hook_preprocess_paragraph__aside().
 */
function lrcs_bootstrap_preprocess_paragraph__aside(&$variables){
  $paragraph = $variables['paragraph'];
  if(!$paragraph->field_display_mode->isEmpty()){
    $variables['paragraph_aside']['display_mode'] = $paragraph->field_display_mode->getValue()[0]['value'];
  }
}
/**
 * Implements hook_preprocess_paragraph__breakout().
 */
function lrcs_bootstrap_preprocess_paragraph__breakout(&$variables){
  $paragraph = $variables['paragraph'];
  $variables['paragraph_breakout']['style'] = "";
  if(!$paragraph->field_background_color->isEmpty()){
    $background_color = $paragraph->field_background_color->getValue()[0]['color'];
    $variables['paragraph_breakout']['style'] .= "background-color: $background_color;";
  }
  if(!$paragraph->field_text_color->isEmpty()){
    $text_color = $paragraph->field_text_color->getValue()[0]['value'];
    switch ($text_color) {
        case "1":
          $variables['text_color'] = "text-black";
          break;
        case "2":
          $variables['text_color'] = "text-white";
      }
  }
  if(!$paragraph->field_background_image->isEmpty() && $background_image = $paragraph->field_background_image->entity){
    $background_image_url = file_create_url($background_image->getFileUri());
    $variables['paragraph_breakout']['style'] .= "background-image: url('$background_image_url');";
  }
  if(empty($variables['paragraph_breakout']['style'])){
    unset($variables['paragraph_breakout']['style']);
  }
//  dpm($variables['paragraph_breakout']);
}
/**
 * Implements hook_preprocess_paragraph__banner().
 */
function lrcs_bootstrap_preprocess_paragraph__banner(&$variables){
  $paragraph = $variables['paragraph'];
  //If banner image and nested paragraphs are present.
  if(!$paragraph->field_image->isEmpty() && !$paragraph->field_content->isEmpty()){
    $image_style = 'banner';
    // Generate image URL.
    if(!empty($image_style)){
      $banner_image_uri = $paragraph->field_image->entity->getFileUri();
      $banner_image = \Drupal\image\Entity\ImageStyle::load($image_style)->buildUrl($banner_image_uri);
    }
    else{
      $banner_image = file_create_url($paragraph->field_image->entity->getFileUri());
    }
    // // Add image as background.
    $variables['attributes']['style'][] = 'background-image: url("' . $banner_image . '");';
    $variables['attributes']['style'][] = 'background-size: cover;background-position: center center;';
    // Hide the normal <img> tag.
    hide($variables['content']['field_image']);
  }
  //Check if banner color is empty.
  if(!$paragraph->field_banner_color->isEmpty()){
    $banner_color = $paragraph->field_banner_color->getValue();
    $banner_color = reset($banner_color);
    $variables['attributes']['style'][] = 'background-color: ' . $banner_color['color'] . ';';
  }
  //Check if text color is empty.
  if (!$paragraph->field_text_color->isEmpty()){
    $text_color = $paragraph->field_text_color->getValue();
    $text_color = reset($text_color);
    $variables['attributes']['style'][] = 'color: ' . $text_color['color'] . ';';
  }
}
function hex2rgb($hex) {
   $hex = str_replace("#", "", $hex);

   if(strlen($hex) == 3) {
      $r = hexdec(substr($hex,0,1).substr($hex,0,1));
      $g = hexdec(substr($hex,1,1).substr($hex,1,1));
      $b = hexdec(substr($hex,2,1).substr($hex,2,1));
   } else {
      $r = hexdec(substr($hex,0,2));
      $g = hexdec(substr($hex,2,2));
      $b = hexdec(substr($hex,4,2));
   }
   $rgb = array($r, $g, $b);
   //return implode(",", $rgb); // returns the rgb values separated by commas
   return $rgb; // returns an array with the rgb values
}
